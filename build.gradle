apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false

    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

def SDK_RELEASE_BASENAME = "makeJar-release-" + new Date().format("yyyy-MM-dd");//混淆后的jar名字
def SDK_OUTPATH = "libs/";//生成Jar的目录
//生成未混淆的Jar
task makeJar(type: Jar) {
    delete SDK_OUTPATH+SDK_RELEASE_BASENAME+'.jar'//删除原来的jar
    //包括子module额class文件
    from('build/intermediates/javac/release/classes')
    destinationDir = file(SDK_OUTPATH)
}
makeJar.dependsOn(build)

